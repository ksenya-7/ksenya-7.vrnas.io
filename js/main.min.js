/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./js/main.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "../node_modules/webpack/buildin/module.js":
/*!*************************************************!*\
  !*** ../node_modules/webpack/buildin/module.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function(module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),

/***/ "./js/main.js":
/*!********************!*\
  !*** ./js/main.js ***!
  \********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _utils_mobile_vh_fix_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/mobile-vh-fix.js */ "./js/utils/mobile-vh-fix.js");
/* harmony import */ var _modules_form_validate_form__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modules/form-validate/form */ "./js/modules/form-validate/form.js");
/* harmony import */ var _modules_menu_init_menu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modules/menu/init-menu */ "./js/modules/menu/init-menu.js");
/* harmony import */ var _modules_scroll_scroll_to_footer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./modules/scroll/scroll-to-footer */ "./js/modules/scroll/scroll-to-footer.js");
/* harmony import */ var _modules_scroll_scroll_menu__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./modules/scroll/scroll-menu */ "./js/modules/scroll/scroll-menu.js");
/* harmony import */ var _modules_accordions_init_accordion__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./modules/accordions/init-accordion */ "./js/modules/accordions/init-accordion.js");
/* harmony import */ var _modules_videos_init_videos__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./modules/videos/init-videos */ "./js/modules/videos/init-videos.js");
/* harmony import */ var _modules_animation_init_animation__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./modules/animation/init-animation */ "./js/modules/animation/init-animation.js");







// import {initParallax} from './modules/parallax/init-parallax';


// ---------------------------------

window.addEventListener('DOMContentLoaded', function () {
  // Utils
  // ---------------------------------

  Object(_utils_mobile_vh_fix_js__WEBPACK_IMPORTED_MODULE_0__["mobileVhFix"])();
  Object(_modules_menu_init_menu__WEBPACK_IMPORTED_MODULE_2__["initMenu"])();
  Object(_modules_scroll_scroll_to_footer__WEBPACK_IMPORTED_MODULE_3__["initScrollToFooter"])();
  Object(_modules_scroll_scroll_menu__WEBPACK_IMPORTED_MODULE_4__["initScrollMenu"])();

  // Modules
  // ---------------------------------

  // все скрипты должны быть в обработчике 'DOMContentLoaded', но не все в 'load'
  // в load следует добавить скрипты, не участвующие в работе первого экрана
  window.addEventListener('load', function () {
    var form = new _modules_form_validate_form__WEBPACK_IMPORTED_MODULE_1__["Form"]();
    window.form = form;
    form.init();
    Object(_modules_accordions_init_accordion__WEBPACK_IMPORTED_MODULE_5__["initAccordions"])();
    Object(_modules_videos_init_videos__WEBPACK_IMPORTED_MODULE_6__["initVideos"])();
    // initParallax();
    Object(_modules_animation_init_animation__WEBPACK_IMPORTED_MODULE_7__["initAnimation"])();
  });
});

// ---------------------------------

// ❗❗❗ обязательно установите плагины eslint, stylelint, editorconfig в редактор кода.

// привязывайте js не на классы, а на дата атрибуты (data-validate)

// вместо модификаторов .block--active используем утилитарные классы
// .is-active || .is-open || .is-invalid и прочие (обязателен нейминг в два слова)
// .select.select--opened ❌ ---> [data-select].is-open ✅

// выносим все в дата атрибуты
// url до иконок пинов карты, настройки автопрокрутки слайдера, url к json и т.д.

// для адаптивного JS используейтся matchMedia и addListener
// const breakpoint = window.matchMedia(`(min-width:1024px)`);
// const breakpointChecker = () => {
//   if (breakpoint.matches) {
//   } else {
//   }
// };
// breakpoint.addListener(breakpointChecker);
// breakpointChecker();

// используйте .closest(el)

/***/ }),

/***/ "./js/modules/accordions/accordions.js":
/*!*********************************************!*\
  !*** ./js/modules/accordions/accordions.js ***!
  \*********************************************/
/*! exports provided: Accordions */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Accordions", function() { return Accordions; });
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var Accordions = /*#__PURE__*/function () {
  function Accordions() {
    _classCallCheck(this, Accordions);
    this._openHeight = 0;
    this._windowWidth = window.innerWidth;
    this._documentClickHandler = this._documentClickHandler.bind(this);
    this._windowResizeHandler = this._windowResizeHandler.bind(this);
    this._init();
  }
  _createClass(Accordions, [{
    key: "_init",
    value: function _init() {
      this.fullUpdate();
      document.addEventListener('click', this._documentClickHandler);
      window.addEventListener('resize', this._windowResizeHandler);
    }
  }, {
    key: "_documentClickHandler",
    value: function _documentClickHandler(evt) {
      var target = evt.target;
      if (!target.closest('[data-accordion="button"]')) {
        return;
      }
      evt.preventDefault();
      var parent = target.closest('[data-accordion="parent"]');
      if (parent.dataset.destroy && !window.matchMedia(parent.dataset.destroy).matches) {
        return;
      }
      var element = target.closest('[data-accordion="element"]');
      if (element.classList.contains('is-active')) {
        this.closeAccordion(element);
        return;
      }
      this.openAccordion(element);
    }
  }, {
    key: "_windowResizeHandler",
    value: function _windowResizeHandler() {
      if (this._windowWidth === window.innerWidth) {
        return;
      }
      this._windowWidth = window.innerWidth;
      this.updateAccordionsHeight();
    }
  }, {
    key: "closeAllAccordion",
    value: function closeAllAccordion(parent) {
      var _this = this;
      var elements = parent.querySelectorAll('[data-accordion="element"]');
      elements.forEach(function (element) {
        var currentParent = element.closest('[data-accordion="parent"]');
        if (currentParent === parent) {
          _this.closeAccordion(element);
        }
      });
    }
  }, {
    key: "updateAccordionsHeight",
    value: function updateAccordionsHeight() {
      var element = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      if (element) {
        var content = element.querySelector('[data-accordion="content"]');
        content.style.transition = 'none';
        content.style.maxHeight = "".concat(content.scrollHeight, "px");
        setTimeout(function () {
          content.style.transition = null;
        });
        return;
      }
      var closeElements = document.querySelectorAll('[data-accordion="element"]:not(.is-active)');
      closeElements.forEach(function (closeElement) {
        var parent = closeElement.closest('[data-accordion="parent"]');
        var content = closeElement.querySelector('[data-accordion="content"]');
        if (parent.dataset.destroy && !window.matchMedia(parent.dataset.destroy).matches) {
          content.style.maxHeight = '100%';
          return;
        }
        content.style.maxHeight = null;
      });
      var openElements = document.querySelectorAll('[data-accordion="element"].is-active');
      openElements.forEach(function (openElement) {
        var content = openElement.querySelector('[data-accordion="content"]');
        var parent = openElement.closest('[data-accordion="parent"]');
        if (parent.dataset.destroy && !window.matchMedia(parent.dataset.destroy).matches) {
          content.style.maxHeight = '100%';
          return;
        }
        content.style.transition = 'none';
        content.style.maxHeight = "".concat(content.scrollHeight, "px");
        setTimeout(function () {
          content.style.transition = null;
        });
      });
    }
  }, {
    key: "fullUpdate",
    value: function fullUpdate() {
      var _this2 = this;
      var parent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var transition = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var openElements;
      if (parent) {
        openElements = parent.querySelectorAll('[data-accordion="element"].is-active');
      } else {
        openElements = document.querySelectorAll('[data-accordion="element"].is-active');
      }
      openElements.forEach(function (openElement) {
        var innerParent = openElement.querySelector('[data-accordion="parent"]');
        if (innerParent) {
          return;
        }
        _this2.openAccordion(openElement, transition);
      });
      this.updateAccordionsHeight();
    }
  }, {
    key: "openAccordion",
    value: function openAccordion(element) {
      var transition = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var parentElement = element.closest('[data-accordion="parent"]');
      var contentElement = element.querySelector('[data-accordion="content"]');
      this._openHeight += contentElement.scrollHeight;
      if (parentElement.hasAttribute('data-single')) {
        this.closeAllAccordion(parentElement);
      }
      element.classList.add('is-active');
      if (transition) {
        contentElement.style.maxHeight = "".concat(this._openHeight, "px");
      } else {
        contentElement.style.transition = 'none';
        contentElement.style.maxHeight = "".concat(this._openHeight, "px");
        setTimeout(function () {
          contentElement.style.transition = null;
        });
      }
      if (parentElement.closest('[data-accordion="element"]')) {
        this.openAccordion(parentElement.closest('[data-accordion="element"]'), transition);
        return;
      }
      this._openHeight = 0;
    }
  }, {
    key: "closeAccordion",
    value: function closeAccordion(element) {
      var transition = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var contentElement = element.querySelector('[data-accordion="content"]');
      if (!contentElement) {
        return;
      }
      element.classList.remove('is-active');
      if (transition) {
        contentElement.style.maxHeight = '0';
      } else {
        contentElement.style.transition = 'none';
        contentElement.style.maxHeight = '0';
        setTimeout(function () {
          contentElement.style.transition = null;
        });
      }
    }
  }]);
  return Accordions;
}();

/***/ }),

/***/ "./js/modules/accordions/init-accordion.js":
/*!*************************************************!*\
  !*** ./js/modules/accordions/init-accordion.js ***!
  \*************************************************/
/*! exports provided: initAccordions, accordions */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initAccordions", function() { return initAccordions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "accordions", function() { return accordions; });
/* harmony import */ var _accordions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./accordions */ "./js/modules/accordions/accordions.js");

var accordions;
var initAccordions = function initAccordions() {
  accordions = new _accordions__WEBPACK_IMPORTED_MODULE_0__["Accordions"]();
  // Используйте в разработке экспортируемую переменную accordions, window сделан для бэкэнда
  window.accordions = accordions;
};


/***/ }),

/***/ "./js/modules/animation/init-animation.js":
/*!************************************************!*\
  !*** ./js/modules/animation/init-animation.js ***!
  \************************************************/
/*! exports provided: initAnimation */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initAnimation", function() { return initAnimation; });
var initAnimation = function initAnimation() {
  var animImages = document.querySelectorAll('.anim-image');
  var screenHeight = document.documentElement.clientHeight;
  // const breakpoint = window.matchMedia('(max-width:1023px)');

  if (animImages.length !== 0) {
    var animOnScroll = function animOnScroll() {
      animImages.forEach(function (image) {
        if (isPartiallyVisible(image)) {
          image.classList.add('is-active');
        }
        // else {
        //   image.classList.remove('is-active');
        // }

        // const breakpointChecker = () => {
        //   if (breakpoint.matches) {
        //     image.classList.add('is-active');
        //   }
        // };

        // breakpoint.addListener(breakpointChecker);
        // breakpointChecker();
      });
    };
    animOnScroll();
    window.addEventListener('scroll', animOnScroll);
  }
  function isPartiallyVisible(element) {
    var elementBoundary = element.getBoundingClientRect();
    var top = elementBoundary.top;
    var bottom = elementBoundary.bottom;
    var height = elementBoundary.height;
    return top + height >= 0 && height + screenHeight > bottom;
  }
};

/***/ }),

/***/ "./js/modules/form-validate/callback.js":
/*!**********************************************!*\
  !*** ./js/modules/form-validate/callback.js ***!
  \**********************************************/
/*! exports provided: callbacks */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "callbacks", function() { return callbacks; });
var baseSuccessCallback = function baseSuccessCallback(event) {
  event.preventDefault();
  // В данном колбеке бэкендер, либо разработчик при необходимости будет писать запрос на отправку формы на сервер и обрабатывать возможные ошибки или успешную отправку формы на сервер
};
var baseErrorCallback = function baseErrorCallback(event) {
  event.preventDefault();
  // Данный коллбек используется при необходимости выполнить какое-либо действие помимо показа ошибок при попытке отправить неккорректные данные, он не связан с запросами на сервер
};
var callbacks = {
  base: {
    // Сбросс формы
    reset: true,
    // Таймаут сброса формы
    resetTimeout: 500,
    successCallback: baseSuccessCallback,
    errorCallback: baseErrorCallback
  }
};

/***/ }),

/***/ "./js/modules/form-validate/form.js":
/*!******************************************!*\
  !*** ./js/modules/form-validate/form.js ***!
  \******************************************/
/*! exports provided: Form */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Form", function() { return Form; });
/* harmony import */ var _validator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validator */ "./js/modules/form-validate/validator.js");
/* harmony import */ var _callback__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./callback */ "./js/modules/form-validate/callback.js");
/* harmony import */ var _init_phone_input__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./init-phone-input */ "./js/modules/form-validate/init-phone-input.js");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }



var Form = /*#__PURE__*/function () {
  function Form() {
    _classCallCheck(this, Form);
    this._validator = new _validator__WEBPACK_IMPORTED_MODULE_0__["Validator"]();
    this._initPhoneInput = _init_phone_input__WEBPACK_IMPORTED_MODULE_2__["initPhoneInput"];
    this._callbacks = _callback__WEBPACK_IMPORTED_MODULE_1__["callbacks"];
    this._validState = false;
  }
  _createClass(Form, [{
    key: "_resetSelect",
    value: function _resetSelect(select) {
      var nativeSelect = select.querySelector('select');
      var activeIndex = nativeSelect.options.selectedIndex;
      var selectedOption = nativeSelect.options[activeIndex];
      var buttonText = select.querySelector('.custom-select__text');
      var selectItems = select.querySelectorAll('.custom-select__item');
      buttonText.textContent = selectedOption.textContent;
      selectItems.forEach(function (item, index) {
        if (index === activeIndex - 1) {
          item.setAttribute('aria-selected', 'true');
          return;
        }
        item.setAttribute('aria-selected', 'false');
      });
      if (!nativeSelect.value) {
        select.classList.remove('not-empty');
        select.classList.remove('is-valid');
      }
    }
  }, {
    key: "_resetSelects",
    value: function _resetSelects(form) {
      var _this = this;
      var selects = form.querySelectorAll('[data-select]');
      selects.forEach(function (select) {
        _this._resetSelect(select);
      });
    }
  }, {
    key: "reset",
    value: function reset(form) {
      var _this2 = this;
      this._validator._reset();
      var parent = form.closest('[data-form-validate]');
      form.reset();
      form.querySelectorAll('.is-invalid').forEach(function (item) {
        return item.classList.remove('is-invalid');
      });
      form.querySelectorAll('.is-valid').forEach(function (item) {
        return item.classList.remove('is-valid');
      });
      // form.querySelectorAll('.input-message').forEach((item) => item.remove());
      form.querySelectorAll('.input-message').forEach(function (item) {
        return setTimeout(function () {
          item.remove();
        }, 3000);
      });
      // parent.querySelectorAll('.input-message').forEach((item) => item.remove());
      parent.querySelectorAll('.input-message').forEach(function (item) {
        return setTimeout(function () {
          item.remove();
        }, 3000);
      });
      setTimeout(function () {
        _this2._resetSelects(form);
      });
    }
  }, {
    key: "initPhoneInput",
    value: function initPhoneInput(parent) {
      this._initPhoneInput(parent);
    }
  }, {
    key: "validateForm",
    value: function validateForm(event) {
      return this._validator.validateForm(event);
    }
  }, {
    key: "validateFormElement",
    value: function validateFormElement(item) {
      return this._validator.validateFormElement(item);
    }
  }, {
    key: "createStates",
    value: function createStates(item) {
      return this._validator._createStates(item);
    }
  }, {
    key: "_onFormSubmit",
    value: function _onFormSubmit(event) {
      var _this3 = this;
      var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      this._validState = this.validateForm(event);
      if (this._validState && callback) {
        this._callbacks[callback].successCallback(event);
        if (this._callbacks[callback].reset) {
          setTimeout(function () {
            _this3.reset(event.target);
          }, this._callbacks[callback].resetTimeout ? this._callbacks[callback].resetTimeout : 500);
        }
        return;
      }
      if (!this._validState && callback) {
        this._callbacks[callback].errorCallback(event);
        return;
      }
    }
  }, {
    key: "_onFormInput",
    value: function _onFormInput(item) {
      this.validateFormElement(item);
      this.createStates(item);
    }
  }, {
    key: "_initValidate",
    value: function _initValidate(parent) {
      var _this4 = this;
      var form = parent.querySelector('form');
      if (!form) {
        return;
      }
      var phoneParents = form.querySelectorAll('[data-validate-type="phone"]');
      phoneParents.forEach(function (item) {
        return _this4._initPhoneInput(item);
      });
      var callback = parent.dataset.callback;
      form.noValidate = true;
      form.addEventListener('submit', function (event) {
        _this4._onFormSubmit(event, callback);
      });
      form.addEventListener('input', function (event) {
        _this4._onFormInput(event.target);
      });
      form.addEventListener('reset', function (event) {
        _this4.reset(event.target);
      });
    }
  }, {
    key: "init",
    value: function init() {
      var _this5 = this;
      this._validateParent = document.querySelectorAll('[data-form-validate]');
      if (!this._validateParent.length) {
        return;
      }
      this._validateParent.forEach(function (parent) {
        return _this5._initValidate(parent);
      });
    }
  }]);
  return Form;
}();

/***/ }),

/***/ "./js/modules/form-validate/init-phone-input.js":
/*!******************************************************!*\
  !*** ./js/modules/form-validate/init-phone-input.js ***!
  \******************************************************/
/*! exports provided: initPhoneInput */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initPhoneInput", function() { return initPhoneInput; });
var baseCountryCode = '+7';
var baseMatrix = ' (___) ___ __ __';
var phoneLength = baseCountryCode.length + baseMatrix.length;
var onPhoneInputInput = function onPhoneInputInput(e) {
  var matrix = "".concat(baseCountryCode).concat(baseMatrix);
  var def = matrix.replace(/\D/g, '');
  var i = 0;
  var val = e.target.value.replace(/\D/g, '');
  if (def.length >= val.length) {
    val = def;
  }
  e.target.value = matrix.replace(/./g, function (a) {
    if (/[_\d]/.test(a) && i < val.length) {
      return val.charAt(i++);
    } else if (i >= val.length) {
      return '';
    } else {
      return a;
    }
  });
};
var onPhoneInputFocus = function onPhoneInputFocus(_ref) {
  var target = _ref.target;
  if (!target.value) {
    target.value = baseCountryCode;
  }
  target.addEventListener('input', onPhoneInputInput);
  target.addEventListener('blur', onPhoneInputBlur);
  target.addEventListener('keydown', onPhoneInputKeydown);
  target.addEventListener('paste', onPhoneInputPaste);
  target.addEventListener('click', onPhoneInputClick);
};
var onPhoneInputClick = function onPhoneInputClick(e) {
  if (e.target.selectionStart < 4) {
    e.preventDefault();
    e.target.setSelectionRange(3, 3);
  }
};
var onPhoneInputPaste = function onPhoneInputPaste(e) {
  e.target.setSelectionRange(0, 0);
  if (!e.target.selectionStart) {
    setTimeout(function () {
      if (e.target.value.startsWith('+7')) {
        return;
      }
      if (e.target.value.startsWith('+8')) {
        e.target.value = "+7 ".concat(e.target.value.slice(3));
        return;
      }
      e.target.value = '';
    });
  }
};
var onPhoneInputKeydown = function onPhoneInputKeydown(e) {
  if (e.target.selectionStart < 4 && (e.keyCode === 37 || e.keyCode === 13)) {
    e.preventDefault();
    e.target.setSelectionRange(3, 3);
  }
};
var onPhoneInputBlur = function onPhoneInputBlur(_ref2) {
  var target = _ref2.target;
  if (target.value === baseCountryCode) {
    var parent = target.closest('[data-validate-type="phone"]');
    target.value = '';
    if (!parent.hasAttribute('data-required')) {
      parent.classList.remove('is-valid');
      parent.classList.remove('is-invalid');
      var parentMessage = parent.querySelector('.input-message');
      if (parentMessage) {
        parentMessage.remove();
      }
    }
    parent.classList.remove('not-empty');
    target.removeEventListener('input', onPhoneInputInput);
    target.removeEventListener('blur', onPhoneInputBlur);
    target.removeEventListener('keydown', onPhoneInputKeydown);
    target.removeEventListener('paste', onPhoneInputPaste);
    target.removeEventListener('click', onPhoneInputClick);
  }
};
var initPhoneInput = function initPhoneInput(parent) {
  var input = parent.querySelector('input');
  parent.dataset.phoneLength = phoneLength;
  input.addEventListener('focus', onPhoneInputFocus);
};

/***/ }),

/***/ "./js/modules/form-validate/matrix.js":
/*!********************************************!*\
  !*** ./js/modules/form-validate/matrix.js ***!
  \********************************************/
/*! exports provided: matrixReplace */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "matrixReplace", function() { return matrixReplace; });
var matrixReplace = function matrixReplace(item, matrix, RegEx) {
  if (!matrix) {
    // eslint-disable-next-line no-console
    console.error('При валидации по матрице обязательно указывать формат матрицы: data-matrix=""');
    item.value = '';
    return;
  }
  if (!RegEx) {
    // eslint-disable-next-line no-console
    console.error('При валидации по матрице обязательно указывать формат ограничений: data-matrix-limitations=""');
    item.value = '';
    return;
  }
  var def = matrix.replace(RegEx, '');
  var val = item.value.replace(RegEx, '');
  var i = 0;
  if (def.length >= val.length) {
    val = def;
  }
  item.value = matrix.replace(/./g, function (a) {
    if (/[_\^]/.test(a) && i < val.length) {
      return val.charAt(i++);
    } else if (i >= val.length) {
      return '';
    } else {
      return a;
    }
  });
};

/***/ }),

/***/ "./js/modules/form-validate/regular-expression.js":
/*!********************************************************!*\
  !*** ./js/modules/form-validate/regular-expression.js ***!
  \********************************************************/
/*! exports provided: getLimitationsRegEx, getMatrixLimitationsRegEx, getMailRegEx */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getLimitationsRegEx", function() { return getLimitationsRegEx; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getMatrixLimitationsRegEx", function() { return getMatrixLimitationsRegEx; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getMailRegEx", function() { return getMailRegEx; });
var setLimitationError = function setLimitationError(limitation) {
  // eslint-disable-next-line no-console
  console.error("\u041F\u0435\u0440\u0435\u0434\u0430\u043D\u043D\u044B\u0439 \u0444\u043E\u0440\u043C\u0430\u0442 \u043E\u0433\u0440\u0430\u043D\u0438\u0447\u0435\u043D\u0438\u044F(data-limitation=\"".concat(limitation, "\") - \u043D\u0435 \u043F\u043E\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442\u0441\u044F. \u041F\u0440\u043E\u0432\u0435\u0440\u044C\u0442\u0435 \u043A\u043E\u0440\u0440\u0435\u043A\u0442\u043D\u043E\u0441\u0442\u044C \u0432\u0432\u0435\u0434\u0451\u043D\u043D\u044B\u0445 \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0439."));
};
var getLimitationsRegEx = function getLimitationsRegEx(limitation) {
  switch (limitation) {
    case 'digit':
      return /[^\d]/g;
    case 'name':
      return /[^a-zA-Zа-яёА-ЯЁ\-\s]/g;
    case 'letters':
      return /[^a-zA-Zа-яёА-ЯЁ\s]/g;
    case 'letters-and-digit':
      return /[^a-zA-Zа-яёА-ЯЁ\s\d]/g;
    case 'cyrillic':
      return /[^а-яёА-ЯЁ\s]/g;
    case 'latin':
      return /[^a-zA-Z\s]/g;
    default:
      return setLimitationError(limitation);
  }
};
var getMatrixLimitationsRegEx = function getMatrixLimitationsRegEx(matrix) {
  switch (matrix) {
    case 'digit':
      return /[^\d]/g;
    case 'name':
      return /[^\а-яё\А-ЯЁ\a-z\A-Z\-]]/g;
    case 'letters':
      return /[^\а-яё\А-ЯЁ\a-z\A-Z]/g;
    case 'letters-and-digit':
      return /[^\а-яё\А-ЯЁ\a-z\A-Z\d]/g;
    case 'cyrillic':
      return /[^\а-яё\А-ЯЁ]/g;
    case 'latin':
      return /[^\a-z\A-Z]/g;
    default:
      return false;
  }
};
var getMailRegEx = function getMailRegEx() {
  return /[a-zA-Zа-яёА-ЯЁ0-9]{1}([a-zA-Zа-яёА-ЯЁ0-9\-_\.]{1,})?@[a-zA-Zа-яёА-ЯЁ0-9\-]{1}([a-zA-Zа-яёА-ЯЁ0-9.\-]{1,})?[a-zA-Zа-яёА-ЯЁ0-9\-]{1}\.[a-zA-Zа-яёА-ЯЁ]{2,6}/;
};

/***/ }),

/***/ "./js/modules/form-validate/render-message.js":
/*!****************************************************!*\
  !*** ./js/modules/form-validate/render-message.js ***!
  \****************************************************/
/*! exports provided: Message */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Message", function() { return Message; });
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var Message = /*#__PURE__*/function () {
  function Message() {
    _classCallCheck(this, Message);
    this._baseErrorText = 'Это поле является обязательным';
  }
  _createClass(Message, [{
    key: "_messageTemplate",
    value: function _messageTemplate(message, state) {
      var cssClass = state === 'valid' ? 'is-valid' : 'is-invalid';
      return "<span class=\"input-message ".concat(cssClass, "\">").concat(message, "</span>");
    }
  }, {
    key: "removeMessage",
    value: function removeMessage(parent) {
      var parentMessage = parent.querySelector('.input-message');
      if (parentMessage) {
        parentMessage.remove();
      }
    }
  }, {
    key: "renderMessage",
    value: function renderMessage(parent, message, state) {
      this.removeMessage(parent);
      parent.insertAdjacentHTML('beforeend', this._messageTemplate(message, state));
    }
  }]);
  return Message;
}();

/***/ }),

/***/ "./js/modules/form-validate/validator.js":
/*!***********************************************!*\
  !*** ./js/modules/form-validate/validator.js ***!
  \***********************************************/
/*! exports provided: Validator */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Validator", function() { return Validator; });
/* harmony import */ var _regular_expression__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./regular-expression */ "./js/modules/form-validate/regular-expression.js");
/* harmony import */ var _matrix__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./matrix */ "./js/modules/form-validate/matrix.js");
/* harmony import */ var _render_message__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./render-message */ "./js/modules/form-validate/render-message.js");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }



var Validator = /*#__PURE__*/function () {
  function Validator() {
    _classCallCheck(this, Validator);
    this._getLimitationsRegEx = _regular_expression__WEBPACK_IMPORTED_MODULE_0__["getLimitationsRegEx"];
    this._getMatrixLimitationsRegEx = _regular_expression__WEBPACK_IMPORTED_MODULE_0__["getMatrixLimitationsRegEx"];
    this._getMailRegEx = _regular_expression__WEBPACK_IMPORTED_MODULE_0__["getMailRegEx"];
    this._matrixReplace = _matrix__WEBPACK_IMPORTED_MODULE_1__["matrixReplace"];
    this._message = new _render_message__WEBPACK_IMPORTED_MODULE_2__["Message"]();
    this._invalidNotEmpty = false;
    this._validState = true;
    this._submitEvent = false;
  }
  _createClass(Validator, [{
    key: "_createStates",
    value: function _createStates(item) {
      var _this = this;
      this._validState = true;
      this._invalidNotEmpty = false;
      var parent = item.closest('[data-form-validate]');
      var formElements = parent.querySelectorAll('input', 'select', 'textarea');
      formElements.forEach(function (element) {
        if (element.getAttribute('aria-invalid') === 'true') {
          _this._validState = false;
          if (element.value) {
            _this._invalidNotEmpty = true;
          }
        }
      });
      this._validateFormParent(parent);
    }
  }, {
    key: "_renderMessage",
    value: function _renderMessage(trigger, parent, input) {
      if (!parent.hasAttribute('data-required') && !input.value) {
        return;
      }
      if (!trigger) {
        parent.classList.add('is-invalid');
        if (parent.hasAttribute('data-message-base') && !input.value) {
          this._message.renderMessage(parent, parent.dataset.messageBase, 'invalid');
        } else if (parent.hasAttribute('data-message-extra') && input.value) {
          this._message.renderMessage(parent, parent.dataset.messageExtra, 'invalid');
        } else if (!parent.hasAttribute('data-message-extra') && parent.hasAttribute('data-message-base') && input.value) {
          this._message.renderMessage(parent, parent.dataset.messageBase, 'invalid');
        } else {
          this._message.removeMessage(parent);
        }
      } else {
        if (parent.hasAttribute('data-message-success')) {
          this._message.renderMessage(parent, parent.dataset.messageSuccess, 'valid');
        } else {
          this._message.removeMessage(parent);
        }
      }
    }
  }, {
    key: "_setItemValidState",
    value: function _setItemValidState(parent, input) {
      if (!parent.hasAttribute('data-required') && !input.value) {
        return;
      }
      parent.classList.add('is-valid');
      parent.classList.remove('is-invalid');
      input.setAttribute('aria-invalid', 'false');
      this._message.removeMessage(parent);
    }
  }, {
    key: "_setItemInvalidState",
    value: function _setItemInvalidState(parent, input) {
      if (!parent.hasAttribute('data-required') && !input.value) {
        return;
      }
      parent.classList.remove('is-valid');
      input.setAttribute('aria-invalid', 'true');
    }
  }, {
    key: "_simpleLimitation",
    value: function _simpleLimitation(item, limitation) {
      item.value = item.value.replace(this._getLimitationsRegEx(limitation), '');
    }
  }, {
    key: "_matrixLimitation",
    value: function _matrixLimitation(item, matrix, limitation) {
      this._matrixReplace(item, matrix, limitation);
    }
  }, {
    key: "_validateTextInput",
    value: function _validateTextInput(parent, input) {
      var flag = true;
      if (input.value.length >= (+input.getAttribute('minlength') || 1)) {
        this._setItemValidState(parent, input);
      } else {
        this._setItemInvalidState(parent, input);
        flag = false;
      }
      return flag;
    }
  }, {
    key: "_validateMatrixInput",
    value: function _validateMatrixInput(parent, input) {
      var flag = true;
      if (input.value.length === input.closest('[data-matrix]').dataset.matrix.length) {
        this._setItemValidState(parent, input);
      } else {
        this._setItemInvalidState(parent, input);
        flag = false;
      }
      return flag;
    }
  }, {
    key: "_validateEmailInput",
    value: function _validateEmailInput(parent, input) {
      var flag = true;
      if (new RegExp(this._getMailRegEx(), '').test(input.value)) {
        this._setItemValidState(parent, input);
      } else {
        this._setItemInvalidState(parent, input);
        flag = false;
      }
      return flag;
    }
  }, {
    key: "_validatePhoneInput",
    value: function _validatePhoneInput(parent, input) {
      var flag = true;
      if (input.value.length >= +parent.dataset.phoneLength) {
        this._setItemValidState(parent, input);
      } else {
        this._setItemInvalidState(parent, input);
        flag = false;
      }
      return flag;
    }
  }, {
    key: "_validateCheckbox",
    value: function _validateCheckbox(parent, input) {
      var flag = true;
      if (input.checked) {
        this._setItemValidState(parent, input);
      } else {
        this._setItemInvalidState(parent, input);
        flag = false;
      }
      return flag;
    }
  }, {
    key: "_findSelectedOption",
    value: function _findSelectedOption(options) {
      var flag = false;
      options.forEach(function (option) {
        if (option.value && option.selected) {
          flag = true;
        }
      });
      return flag;
    }
  }, {
    key: "_validateSelect",
    value: function _validateSelect(parent, input) {
      var options = input.querySelectorAll('option');
      var customSelectText = parent.querySelector('.custom-select__text');
      input.setAttribute('aria-invalid', 'false');
      var flag = true;
      if (this._findSelectedOption(options)) {
        this._setItemValidState(parent, input);
      } else {
        this._setItemInvalidState(parent, input);
        parent.classList.remove('not-empty');
        customSelectText.innerHTML = '';
        flag = false;
      }
      return flag;
    }
  }, {
    key: "_returnCheckedElements",
    value: function _returnCheckedElements(inputs) {
      var flag = false;
      inputs.forEach(function (input) {
        if (input.checked) {
          flag = true;
        }
      });
      return flag;
    }
  }, {
    key: "_removeGroupAria",
    value: function _removeGroupAria(inputs) {
      inputs.forEach(function (input) {
        if (!input.checked) {
          input.removeAttribute('aria-required');
          input.removeAttribute('aria-invalid');
        } else {
          input.setAttribute('aria-required', true);
          input.setAttribute('aria-invalid', false);
        }
      });
    }
  }, {
    key: "_setGroupAria",
    value: function _setGroupAria(inputs) {
      inputs.forEach(function (input) {
        input.setAttribute('aria-required', true);
        input.setAttribute('aria-invalid', true);
      });
    }
  }, {
    key: "_validateToggleGroup",
    value: function _validateToggleGroup(parent) {
      var formElements = parent.querySelectorAll('input');
      var flag = true;
      if (this._returnCheckedElements(formElements)) {
        this._removeGroupAria(formElements);
        parent.classList.remove('is-invalid');
        parent.classList.add('is-valid');
        this._message.removeMessage(parent);
      } else {
        this._setGroupAria(formElements);
        parent.classList.remove('is-valid');
        flag = false;
      }
      return flag;
    }
  }, {
    key: "_customExample",
    value: function _customExample(parent, input) {
      var flag = true;
      if (!input.value.length) {
        parent.dataset.messageBase = 'Поле обязательно к заполнению';
        this._setItemInvalidState(parent, input);
        flag = false;
      } else if (input.value.length < input.minLength) {
        parent.dataset.messageBase = "\u041E\u0441\u0442\u0430\u043B\u043E\u0441\u044C \u0432\u0432\u0435\u0441\u0442\u0438 \u0435\u0449\u0451 ".concat(input.minLength - input.value.length, " \u0441\u0438\u043C\u0432\u043E\u043B\u043E\u0432");
        this._setItemInvalidState(parent, input);
        flag = false;
      } else if (input.value.length > input.minLength) {
        parent.dataset.messageBase = "\u0412\u044B \u0432\u0432\u0435\u043B\u0438 ".concat(input.value.length - input.minLength, " \u043B\u0438\u0448\u043D\u0438\u0445 \u0441\u0438\u043C\u0432\u043E\u043B\u043E\u0432");
        this._setItemInvalidState(parent, input);
        flag = false;
      } else {
        parent.dataset.messageSuccess = 'Поле заполнено корректно';
        this._setItemValidState(parent, input);
        flag = true;
      }
      return flag;
    }
  }, {
    key: "_validateFile",
    value: function _validateFile(parent, input) {
      var flag = true;
      var sizeTest = parent.dataset.maxSize && input.files[0] ? input.files[0].size < +parent.dataset.maxSize : true;
      if (input.value && sizeTest) {
        this._setItemValidState(parent, input);
      } else {
        this._setItemInvalidState(parent, input);
        flag = false;
      }
      return flag;
    }
  }, {
    key: "_customUpload",
    value: function _customUpload(parent, input) {
      var flag = true;
      if (parent.classList.contains('is-invalid') || !input.files[0]) {
        flag = false;
      }
      return flag;
    }
  }, {
    key: "_validateInput",
    value: function _validateInput(type, parent, input) {
      switch (type) {
        case 'text':
          return this._validateTextInput(parent, input);
        case 'matrix':
          return this._validateMatrixInput(parent, input);
        case 'email':
          return this._validateEmailInput(parent, input);
        case 'phone':
          return this._validatePhoneInput(parent, input);
        case 'checkbox':
          return this._validateCheckbox(parent, input);
        case 'select':
          return this._validateSelect(parent, input);
        case 'toggle-group':
          return this._validateToggleGroup(parent, input);
        case 'file':
          return this._validateFile(parent, input);
        case 'custom-upload':
          return this._customUpload(parent, input);
        case 'custom-example':
          return this._customExample(parent, input);
        default:
          return false;
      }
    }
  }, {
    key: "_baseParentValidate",
    value: function _baseParentValidate(formParent) {
      if (!this._submitEvent) {
        return;
      }
      if (!this._invalidNotEmpty && !this._validState) {
        this._message.renderMessage(formParent, formParent.dataset.messageBase, 'invalid');
        return;
      }
      if (this._invalidNotEmpty && !this._validState) {
        this._message.renderMessage(formParent, formParent.dataset.messageExtra || formParent.dataset.messageBase, 'invalid');
        return;
      }
      if (this._validState) {
        this._message.removeMessage(formParent);
        this._message.renderMessage(formParent, formParent.dataset.messageSuccess, 'valid');
        return;
      }
    }
  }, {
    key: "_validateParent",
    value: function _validateParent(formParent, type) {
      switch (type) {
        case 'base':
          return this._baseParentValidate(formParent);
        default:
          return false;
      }
    }
  }, {
    key: "validateFormElement",
    value: function validateFormElement(formElement) {
      var fullValidate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var parent = formElement.closest('[data-validate-type]');
      if (!parent) {
        return;
      }
      if (!parent.hasAttribute('data-required')) {
        var removeElement = parent.querySelector('input') || parent.querySelector('select') || parent.querySelector('textarea');
        if (!removeElement.value) {
          parent.classList.remove('is-valid');
          parent.classList.remove('is-invalid');
        }
      }
      var onInputValidate = parent.hasAttribute('data-on-input-validate');
      if (parent.hasAttribute('data-limitation')) {
        this._simpleLimitation(formElement, parent.dataset.limitation);
      }
      if (parent.dataset.validateType === 'matrix') {
        this._matrixLimitation(formElement, parent.dataset.matrix, this._getMatrixLimitationsRegEx(parent.dataset.matrixLimitation));
      }
      var isValid = this._validateInput(parent.dataset.validateType, parent, formElement);
      if (onInputValidate || fullValidate) {
        this._renderMessage(isValid, parent, formElement);
      }
    }
  }, {
    key: "_fullValidate",
    value: function _fullValidate(items) {
      var _this2 = this;
      var isValid = true;
      items.forEach(function (item) {
        var formElement = item.querySelector('input') || item.querySelector('select') || item.querySelector('textarea');
        _this2.validateFormElement(formElement, true);
        if (item.classList.contains('is-invalid')) {
          isValid = false;
        }
      });
      return isValid;
    }
  }, {
    key: "validateForm",
    value: function validateForm(event) {
      if (event.type === 'submit') {
        this._submitEvent = true;
      }
      var validateItems = event.target.querySelectorAll('[data-validate-type]');
      var result = this._fullValidate(validateItems);
      this._createStates(event.target);
      return result;
    }
  }, {
    key: "_reset",
    value: function _reset() {
      this._submitEvent = false;
    }
  }, {
    key: "_validateFormParent",
    value: function _validateFormParent(element) {
      var formParent = element.closest('[data-form-validate]');
      if (formParent.dataset.parentValidate) {
        this._validateParent(formParent, formParent.dataset.parentValidate);
      }
    }
  }]);
  return Validator;
}();

/***/ }),

/***/ "./js/modules/menu/init-menu.js":
/*!**************************************!*\
  !*** ./js/modules/menu/init-menu.js ***!
  \**************************************/
/*! exports provided: initMenu */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initMenu", function() { return initMenu; });
/* harmony import */ var _utils_scroll_lock__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/scroll-lock */ "./js/utils/scroll-lock.js");
/* harmony import */ var _utils_scroll_lock__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_utils_scroll_lock__WEBPACK_IMPORTED_MODULE_0__);

var breakpoint = window.matchMedia('(min-width:1023px)');
var initMenu = function initMenu() {
  var header = document.querySelector('.header');
  var mainNav = document.querySelector('.main-nav');
  if (!mainNav) {
    return;
  }
  var toggleBtn = mainNav.querySelector('.main-nav__toggle');
  var isToggleElement = function isToggleElement(element) {
    return Boolean(element.closest('.main-nav__toggle'));
  };
  var isScrollElement = function isScrollElement(element) {
    return Boolean(element.closest('.main-nav__scroll'));
  };
  var isMenuClosed = function isMenuClosed() {
    return mainNav.classList.contains('is-closed');
  };
  var isMenuOpened = function isMenuOpened() {
    return mainNav.classList.contains('is-opened');
  };
  var closeMenu = function closeMenu() {
    mainNav.classList.add('is-closed');
    setTimeout(function () {
      mainNav.classList.remove('is-opened');
      header.classList.remove('header--bg');
      Object(_utils_scroll_lock__WEBPACK_IMPORTED_MODULE_0__["enablePageScroll"])(mainNav);
    }, 600);
    toggleBtn.blur();
  };
  var openMenu = function openMenu() {
    mainNav.classList.remove('is-closed');
    mainNav.classList.add('is-opened');
    header.classList.add('header--bg');
    Object(_utils_scroll_lock__WEBPACK_IMPORTED_MODULE_0__["disablePageScroll"])(mainNav);
  };
  var onEscKeyDown = function onEscKeyDown(e) {
    if (e.key === 'Esc' || e.key === 'Escape') {
      if (mainNav) {
        closeMenu();
      }
    }
  };
  var toggleMenu = function toggleMenu() {
    if (isMenuClosed()) {
      openMenu();
    } else {
      closeMenu();
    }
  };
  var onDocumentClick = function onDocumentClick(evt) {
    var target = evt.target;
    if (!mainNav) {
      return;
    }
    if (isMenuOpened && !target.closest('.main-nav__wrapper') && target.closest('.main-nav') && !isToggleElement(target)) {
      document.removeEventListener('keydown', onEscKeyDown);
      closeMenu();
    }
    if (isToggleElement(target)) {
      toggleMenu();
    }
    if (isScrollElement(target)) {
      closeMenu();
    }
    if (isMenuOpened) {
      document.addEventListener('keydown', onEscKeyDown);
    }
  };
  var breakpointChecker = function breakpointChecker() {
    if (breakpoint.matches) {
      Object(_utils_scroll_lock__WEBPACK_IMPORTED_MODULE_0__["enablePageScroll"])(mainNav);
      closeMenu();
    }
  };
  breakpoint.addListener(breakpointChecker);
  breakpointChecker();
  document.addEventListener('click', onDocumentClick);
};


/***/ }),

/***/ "./js/modules/scroll/scroll-menu.js":
/*!******************************************!*\
  !*** ./js/modules/scroll/scroll-menu.js ***!
  \******************************************/
/*! exports provided: initScrollMenu */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initScrollMenu", function() { return initScrollMenu; });
var header = document.querySelector('.header');
var scrolledHeaderStart = 0;
var headerScrollHandler = function headerScrollHandler() {
  var scrollTop = window.pageYOffset;
  if (scrollTop > scrolledHeaderStart) {
    header.classList.add('header--fixed');
  } else {
    header.classList.remove('header--fixed');
  }
};
var initScrollMenu = function initScrollMenu() {
  window.addEventListener('scroll', headerScrollHandler);
};


/***/ }),

/***/ "./js/modules/scroll/scroll-to-footer.js":
/*!***********************************************!*\
  !*** ./js/modules/scroll/scroll-to-footer.js ***!
  \***********************************************/
/*! exports provided: initScrollToFooter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initScrollToFooter", function() { return initScrollToFooter; });
var moveTo = new window.MoveTo({
  duration: 800,
  easing: 'easeOutQuart'
});
var anchors = document.querySelectorAll('.js-trigger');
var initScrollToFooter = function initScrollToFooter() {
  if (anchors.length) {
    anchors.forEach(function (anchor) {
      moveTo.registerTrigger(anchor);
    });
  }
};


/***/ }),

/***/ "./js/modules/videos/init-videos.js":
/*!******************************************!*\
  !*** ./js/modules/videos/init-videos.js ***!
  \******************************************/
/*! exports provided: initVideos */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initVideos", function() { return initVideos; });
var videos = document.querySelectorAll('video');
var playing = true;
var playBtns = document.querySelectorAll('.block-video__play-button');
var initVideos = function initVideos() {
  if (!videos) {
    return;
  }
  videos.forEach(function (videoEl) {
    var hideCover = function hideCover(parentElement) {
      var btnElement = parentElement.querySelector('button');
      var bgElement = parentElement.querySelector('.block-video__bg');
      btnElement.classList.add('is-hidden');
      bgElement.classList.add('is-hidden');
    };
    var onPlayButtonClick = function onPlayButtonClick(evt) {
      evt.preventDefault();
      var parentElement = evt.target.closest('.block-video');
      var videoWrapper = parentElement.querySelector('.block-video__wrapper');
      var video = videoWrapper.querySelector('video');
      var parentBlock = evt.target.closest('.js-video-parent');
      if (parentElement && video) {
        hideCover(parentElement);
        if (parentBlock) {
          var hidingElements = parentBlock.querySelectorAll('.js-hiding');
          hidingElements.forEach(function (el) {
            el.classList.add('hide-element');
          });
        }
        video.play();
        video.setAttribute('controls', 'controls');

        // video.addEventListener('click', () => {
        //   if (video.paused) {
        //     video.play();
        //   } else {
        //     video.pause();
        //   }
        // });
      }
    };
    videoEl.addEventListener('play', function () {
      if (playing) {
        videos.forEach(function (el) {
          el.pause();
        });
      }
      if (videoEl.paused) {
        playing = false;
        videoEl.play();
      } else {
        playing = true;
      }
    });
    playBtns.forEach(function (button) {
      return button.addEventListener('click', onPlayButtonClick);
    });
  });
};

/***/ }),

/***/ "./js/utils/ios-checker.js":
/*!*********************************!*\
  !*** ./js/utils/ios-checker.js ***!
  \*********************************/
/*! exports provided: iosChecker */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "iosChecker", function() { return iosChecker; });
var iosChecker = function iosChecker() {
  return ['iPad Simulator', 'iPhone Simulator', 'iPod Simulator', 'iPad', 'iPhone', 'iPod'].includes(navigator.platform)
  // iPad on iOS 13 detection
  || navigator.userAgent.includes('Mac') && 'ontouchend' in document;
};

/***/ }),

/***/ "./js/utils/mobile-vh-fix.js":
/*!***********************************!*\
  !*** ./js/utils/mobile-vh-fix.js ***!
  \***********************************/
/*! exports provided: mobileVhFix */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mobileVhFix", function() { return mobileVhFix; });
/* harmony import */ var _ios_checker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ios-checker */ "./js/utils/ios-checker.js");

var mobileVhFix = function mobileVhFix() {
  var isMobile = /Android|webOS|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
  var isIE = !!window.MSInputMethodContext && !!document.documentMode;
  if (!isIE && (isMobile || Object(_ios_checker__WEBPACK_IMPORTED_MODULE_0__["iosChecker"])())) {
    var updateViewportHeight = function updateViewportHeight() {
      var vh = window.innerHeight * 0.01;
      document.documentElement.style.setProperty('--vh', "".concat(vh, "px"));
    };
    updateViewportHeight();
    window.addEventListener('resize', updateViewportHeight);
  }
};


/***/ }),

/***/ "./js/utils/scroll-lock.js":
/*!*********************************!*\
  !*** ./js/utils/scroll-lock.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
(function webpackUniversalModuleDefinition(root, factory) {
  if (( false ? undefined : _typeof(exports)) === 'object' && ( false ? undefined : _typeof(module)) === 'object') module.exports = factory();else if (true) !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else {}
})(this, function () {
  return /******/function (modules) {
    // webpackBootstrap
    /******/ // The module cache
    /******/
    var installedModules = {};
    /******/
    /******/ // The require function
    /******/
    function __webpack_require__(moduleId) {
      /******/
      /******/ // Check if module is in cache
      /******/if (installedModules[moduleId]) {
        /******/return installedModules[moduleId].exports;
        /******/
      }
      /******/ // Create a new module (and put it into the cache)
      /******/
      var module = installedModules[moduleId] = {
        /******/i: moduleId,
        /******/l: false,
        /******/exports: {}
        /******/
      };
      /******/
      /******/ // Execute the module function
      /******/
      modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
      /******/
      /******/ // Flag the module as loaded
      /******/
      module.l = true;
      /******/
      /******/ // Return the exports of the module
      /******/
      return module.exports;
      /******/
    }
    /******/
    /******/
    /******/ // expose the modules object (__webpack_modules__)
    /******/
    __webpack_require__.m = modules;
    /******/
    /******/ // expose the module cache
    /******/
    __webpack_require__.c = installedModules;
    /******/
    /******/ // define getter function for harmony exports
    /******/
    __webpack_require__.d = function (exports, name, getter) {
      /******/if (!__webpack_require__.o(exports, name)) {
        /******/Object.defineProperty(exports, name, {
          enumerable: true,
          get: getter
        });
        /******/
      }
      /******/
    };
    /******/
    /******/ // define __esModule on exports
    /******/
    __webpack_require__.r = function (exports) {
      /******/if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {
        /******/Object.defineProperty(exports, Symbol.toStringTag, {
          value: 'Module'
        });
        /******/
      }
      /******/
      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      /******/
    };
    /******/
    /******/ // create a fake namespace object
    /******/ // mode & 1: value is a module id, require it
    /******/ // mode & 2: merge all properties of value into the ns
    /******/ // mode & 4: return value when already ns object
    /******/ // mode & 8|1: behave like require
    /******/
    __webpack_require__.t = function (value, mode) {
      /******/if (mode & 1) value = __webpack_require__(value);
      /******/
      if (mode & 8) return value;
      /******/
      if (mode & 4 && _typeof(value) === 'object' && value && value.__esModule) return value;
      /******/
      var ns = Object.create(null);
      /******/
      __webpack_require__.r(ns);
      /******/
      Object.defineProperty(ns, 'default', {
        enumerable: true,
        value: value
      });
      /******/
      if (mode & 2 && typeof value != 'string') for (var key in value) __webpack_require__.d(ns, key, function (key) {
        return value[key];
      }.bind(null, key));
      /******/
      return ns;
      /******/
    };
    /******/
    /******/ // getDefaultExport function for compatibility with non-harmony modules
    /******/
    __webpack_require__.n = function (module) {
      /******/var getter = module && module.__esModule ? /******/function getDefault() {
        return module['default'];
      } : /******/function getModuleExports() {
        return module;
      };
      /******/
      __webpack_require__.d(getter, 'a', getter);
      /******/
      return getter;
      /******/
    };
    /******/
    /******/ // Object.prototype.hasOwnProperty.call
    /******/
    __webpack_require__.o = function (object, property) {
      return Object.prototype.hasOwnProperty.call(object, property);
    };
    /******/
    /******/ // __webpack_public_path__
    /******/
    __webpack_require__.p = "";
    /******/
    /******/
    /******/ // Load entry module and return exports
    /******/
    return __webpack_require__(__webpack_require__.s = 0);
    /******/
  }
  /************************************************************************/
  /******/([( /* 0 */
  /***/function (module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);

    // CONCATENATED MODULE: ./src/tools.js
    var argumentAsArray = function argumentAsArray(argument) {
      return Array.isArray(argument) ? argument : [argument];
    };
    var isElement = function isElement(target) {
      return target instanceof Node;
    };
    var isElementList = function isElementList(nodeList) {
      return nodeList instanceof NodeList;
    };
    var eachNode = function eachNode(nodeList, callback) {
      if (nodeList && callback) {
        nodeList = isElementList(nodeList) ? nodeList : [nodeList];
        for (var i = 0; i < nodeList.length; i++) {
          if (callback(nodeList[i], i, nodeList.length) === true) {
            break;
          }
        }
      }
    };
    var throwError = function throwError(message) {
      return console.error("[scroll-lock] ".concat(message));
    };
    var arrayAsSelector = function arrayAsSelector(array) {
      if (Array.isArray(array)) {
        var selector = array.join(', ');
        return selector;
      }
    };
    var nodeListAsArray = function nodeListAsArray(nodeList) {
      var nodes = [];
      eachNode(nodeList, function (node) {
        return nodes.push(node);
      });
      return nodes;
    };
    var findParentBySelector = function findParentBySelector($el, selector) {
      var self = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      var $root = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : document;
      if (self && nodeListAsArray($root.querySelectorAll(selector)).indexOf($el) !== -1) {
        return $el;
      }
      while (($el = $el.parentElement) && nodeListAsArray($root.querySelectorAll(selector)).indexOf($el) === -1) {
        ;
      }
      return $el;
    };
    var elementHasSelector = function elementHasSelector($el, selector) {
      var $root = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : document;
      var has = nodeListAsArray($root.querySelectorAll(selector)).indexOf($el) !== -1;
      return has;
    };
    var elementHasOverflowHidden = function elementHasOverflowHidden($el) {
      if ($el) {
        var computedStyle = getComputedStyle($el);
        var overflowIsHidden = computedStyle.overflow === 'hidden';
        return overflowIsHidden;
      }
    };
    var elementScrollTopOnStart = function elementScrollTopOnStart($el) {
      if ($el) {
        if (elementHasOverflowHidden($el)) {
          return true;
        }
        var scrollTop = $el.scrollTop;
        return scrollTop <= 0;
      }
    };
    var elementScrollTopOnEnd = function elementScrollTopOnEnd($el) {
      if ($el) {
        if (elementHasOverflowHidden($el)) {
          return true;
        }
        var scrollTop = $el.scrollTop;
        var scrollHeight = $el.scrollHeight;
        var scrollTopWithHeight = scrollTop + $el.offsetHeight;
        return scrollTopWithHeight >= scrollHeight;
      }
    };
    var elementScrollLeftOnStart = function elementScrollLeftOnStart($el) {
      if ($el) {
        if (elementHasOverflowHidden($el)) {
          return true;
        }
        var scrollLeft = $el.scrollLeft;
        return scrollLeft <= 0;
      }
    };
    var elementScrollLeftOnEnd = function elementScrollLeftOnEnd($el) {
      if ($el) {
        if (elementHasOverflowHidden($el)) {
          return true;
        }
        var scrollLeft = $el.scrollLeft;
        var scrollWidth = $el.scrollWidth;
        var scrollLeftWithWidth = scrollLeft + $el.offsetWidth;
        return scrollLeftWithWidth >= scrollWidth;
      }
    };
    var elementIsScrollableField = function elementIsScrollableField($el) {
      var selector = 'textarea, [contenteditable="true"]';
      return elementHasSelector($el, selector);
    };
    var elementIsInputRange = function elementIsInputRange($el) {
      var selector = 'input[type="range"]';
      return elementHasSelector($el, selector);
    };
    // CONCATENATED MODULE: ./src/scroll-lock.js
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, "disablePageScroll", function () {
      return disablePageScroll;
    });
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, "enablePageScroll", function () {
      return enablePageScroll;
    });
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, "getScrollState", function () {
      return getScrollState;
    });
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, "clearQueueScrollLocks", function () {
      return clearQueueScrollLocks;
    });
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, "getTargetScrollBarWidth", function () {
      return scroll_lock_getTargetScrollBarWidth;
    });
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, "getCurrentTargetScrollBarWidth", function () {
      return scroll_lock_getCurrentTargetScrollBarWidth;
    });
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, "getPageScrollBarWidth", function () {
      return getPageScrollBarWidth;
    });
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, "getCurrentPageScrollBarWidth", function () {
      return getCurrentPageScrollBarWidth;
    });
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, "addScrollableTarget", function () {
      return scroll_lock_addScrollableTarget;
    });
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, "removeScrollableTarget", function () {
      return scroll_lock_removeScrollableTarget;
    });
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, "addScrollableSelector", function () {
      return scroll_lock_addScrollableSelector;
    });
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, "removeScrollableSelector", function () {
      return scroll_lock_removeScrollableSelector;
    });
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, "addLockableTarget", function () {
      return scroll_lock_addLockableTarget;
    });
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, "addLockableSelector", function () {
      return scroll_lock_addLockableSelector;
    });
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, "setFillGapMethod", function () {
      return scroll_lock_setFillGapMethod;
    });
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, "addFillGapTarget", function () {
      return scroll_lock_addFillGapTarget;
    });
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, "removeFillGapTarget", function () {
      return scroll_lock_removeFillGapTarget;
    });
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, "addFillGapSelector", function () {
      return scroll_lock_addFillGapSelector;
    });
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, "removeFillGapSelector", function () {
      return scroll_lock_removeFillGapSelector;
    });
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, "refillGaps", function () {
      return refillGaps;
    });
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === 'function') {
          ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
            return Object.getOwnPropertyDescriptor(source, sym).enumerable;
          }));
        }
        ownKeys.forEach(function (key) {
          _defineProperty(target, key, source[key]);
        });
      }
      return target;
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value: value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var FILL_GAP_AVAILABLE_METHODS = ['padding', 'margin', 'width', 'max-width', 'none'];
    var TOUCH_DIRECTION_DETECT_OFFSET = 3;
    var state = {
      scroll: true,
      queue: 0,
      scrollableSelectors: ['[data-scroll-lock-scrollable]'],
      lockableSelectors: ['body', '[data-scroll-lock-lockable]'],
      fillGapSelectors: ['body', '[data-scroll-lock-fill-gap]', '[data-scroll-lock-lockable]'],
      fillGapMethod: FILL_GAP_AVAILABLE_METHODS[0],
      //
      startTouchY: 0,
      startTouchX: 0
    };
    var disablePageScroll = function disablePageScroll(target) {
      if (state.queue <= 0) {
        state.scroll = false;
        scroll_lock_hideLockableOverflow();
        fillGaps();
      }
      scroll_lock_addScrollableTarget(target);
      state.queue++;
    };
    var enablePageScroll = function enablePageScroll(target) {
      state.queue > 0 && state.queue--;
      if (state.queue <= 0) {
        state.scroll = true;
        scroll_lock_showLockableOverflow();
        unfillGaps();
      }
      scroll_lock_removeScrollableTarget(target);
    };
    var getScrollState = function getScrollState() {
      return state.scroll;
    };
    var clearQueueScrollLocks = function clearQueueScrollLocks() {
      state.queue = 0;
    };
    var scroll_lock_getTargetScrollBarWidth = function getTargetScrollBarWidth($target) {
      var onlyExists = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      if (isElement($target)) {
        var currentOverflowYProperty = $target.style.overflowY;
        if (onlyExists) {
          if (!getScrollState()) {
            $target.style.overflowY = $target.getAttribute('data-scroll-lock-saved-overflow-y-property');
          }
        } else {
          $target.style.overflowY = 'scroll';
        }
        var width = scroll_lock_getCurrentTargetScrollBarWidth($target);
        $target.style.overflowY = currentOverflowYProperty;
        return width;
      } else {
        return 0;
      }
    };
    var scroll_lock_getCurrentTargetScrollBarWidth = function getCurrentTargetScrollBarWidth($target) {
      if (isElement($target)) {
        if ($target === document.body) {
          var documentWidth = document.documentElement.clientWidth;
          var windowWidth = window.innerWidth;
          var currentWidth = windowWidth - documentWidth;
          return currentWidth;
        } else {
          var borderLeftWidthCurrentProperty = $target.style.borderLeftWidth;
          var borderRightWidthCurrentProperty = $target.style.borderRightWidth;
          $target.style.borderLeftWidth = '0px';
          $target.style.borderRightWidth = '0px';
          var _currentWidth = $target.offsetWidth - $target.clientWidth;
          $target.style.borderLeftWidth = borderLeftWidthCurrentProperty;
          $target.style.borderRightWidth = borderRightWidthCurrentProperty;
          return _currentWidth;
        }
      } else {
        return 0;
      }
    };
    var getPageScrollBarWidth = function getPageScrollBarWidth() {
      var onlyExists = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      return scroll_lock_getTargetScrollBarWidth(document.body, onlyExists);
    };
    var getCurrentPageScrollBarWidth = function getCurrentPageScrollBarWidth() {
      return scroll_lock_getCurrentTargetScrollBarWidth(document.body);
    };
    var scroll_lock_addScrollableTarget = function addScrollableTarget(target) {
      if (target) {
        var targets = argumentAsArray(target);
        targets.map(function ($targets) {
          eachNode($targets, function ($target) {
            if (isElement($target)) {
              $target.setAttribute('data-scroll-lock-scrollable', '');
            } else {
              throwError("\"".concat($target, "\" is not a Element."));
            }
          });
        });
      }
    };
    var scroll_lock_removeScrollableTarget = function removeScrollableTarget(target) {
      if (target) {
        var targets = argumentAsArray(target);
        targets.map(function ($targets) {
          eachNode($targets, function ($target) {
            if (isElement($target)) {
              $target.removeAttribute('data-scroll-lock-scrollable');
            } else {
              throwError("\"".concat($target, "\" is not a Element."));
            }
          });
        });
      }
    };
    var scroll_lock_addScrollableSelector = function addScrollableSelector(selector) {
      if (selector) {
        var selectors = argumentAsArray(selector);
        selectors.map(function (selector) {
          state.scrollableSelectors.push(selector);
        });
      }
    };
    var scroll_lock_removeScrollableSelector = function removeScrollableSelector(selector) {
      if (selector) {
        var selectors = argumentAsArray(selector);
        selectors.map(function (selector) {
          state.scrollableSelectors = state.scrollableSelectors.filter(function (sSelector) {
            return sSelector !== selector;
          });
        });
      }
    };
    var scroll_lock_addLockableTarget = function addLockableTarget(target) {
      if (target) {
        var targets = argumentAsArray(target);
        targets.map(function ($targets) {
          eachNode($targets, function ($target) {
            if (isElement($target)) {
              $target.setAttribute('data-scroll-lock-lockable', '');
            } else {
              throwError("\"".concat($target, "\" is not a Element."));
            }
          });
        });
        if (!getScrollState()) {
          scroll_lock_hideLockableOverflow();
        }
      }
    };
    var scroll_lock_addLockableSelector = function addLockableSelector(selector) {
      if (selector) {
        var selectors = argumentAsArray(selector);
        selectors.map(function (selector) {
          state.lockableSelectors.push(selector);
        });
        if (!getScrollState()) {
          scroll_lock_hideLockableOverflow();
        }
        scroll_lock_addFillGapSelector(selector);
      }
    };
    var scroll_lock_setFillGapMethod = function setFillGapMethod(method) {
      if (method) {
        if (FILL_GAP_AVAILABLE_METHODS.indexOf(method) !== -1) {
          state.fillGapMethod = method;
          refillGaps();
        } else {
          var methods = FILL_GAP_AVAILABLE_METHODS.join(', ');
          throwError("\"".concat(method, "\" method is not available!\nAvailable fill gap methods: ").concat(methods, "."));
        }
      }
    };
    var scroll_lock_addFillGapTarget = function addFillGapTarget(target) {
      if (target) {
        var targets = argumentAsArray(target);
        targets.map(function ($targets) {
          eachNode($targets, function ($target) {
            if (isElement($target)) {
              $target.setAttribute('data-scroll-lock-fill-gap', '');
              if (!state.scroll) {
                scroll_lock_fillGapTarget($target);
              }
            } else {
              throwError("\"".concat($target, "\" is not a Element."));
            }
          });
        });
      }
    };
    var scroll_lock_removeFillGapTarget = function removeFillGapTarget(target) {
      if (target) {
        var targets = argumentAsArray(target);
        targets.map(function ($targets) {
          eachNode($targets, function ($target) {
            if (isElement($target)) {
              $target.removeAttribute('data-scroll-lock-fill-gap');
              if (!state.scroll) {
                scroll_lock_unfillGapTarget($target);
              }
            } else {
              throwError("\"".concat($target, "\" is not a Element."));
            }
          });
        });
      }
    };
    var scroll_lock_addFillGapSelector = function addFillGapSelector(selector) {
      if (selector) {
        var selectors = argumentAsArray(selector);
        selectors.map(function (selector) {
          if (state.fillGapSelectors.indexOf(selector) === -1) {
            state.fillGapSelectors.push(selector);
            if (!state.scroll) {
              scroll_lock_fillGapSelector(selector);
            }
          }
        });
      }
    };
    var scroll_lock_removeFillGapSelector = function removeFillGapSelector(selector) {
      if (selector) {
        var selectors = argumentAsArray(selector);
        selectors.map(function (selector) {
          state.fillGapSelectors = state.fillGapSelectors.filter(function (fSelector) {
            return fSelector !== selector;
          });
          if (!state.scroll) {
            scroll_lock_unfillGapSelector(selector);
          }
        });
      }
    };
    var refillGaps = function refillGaps() {
      if (!state.scroll) {
        fillGaps();
      }
    };
    var scroll_lock_hideLockableOverflow = function hideLockableOverflow() {
      var selector = arrayAsSelector(state.lockableSelectors);
      scroll_lock_hideLockableOverflowSelector(selector);
    };
    var scroll_lock_showLockableOverflow = function showLockableOverflow() {
      var selector = arrayAsSelector(state.lockableSelectors);
      scroll_lock_showLockableOverflowSelector(selector);
    };
    var scroll_lock_hideLockableOverflowSelector = function hideLockableOverflowSelector(selector) {
      var $targets = document.querySelectorAll(selector);
      eachNode($targets, function ($target) {
        scroll_lock_hideLockableOverflowTarget($target);
      });
    };
    var scroll_lock_showLockableOverflowSelector = function showLockableOverflowSelector(selector) {
      var $targets = document.querySelectorAll(selector);
      eachNode($targets, function ($target) {
        scroll_lock_showLockableOverflowTarget($target);
      });
    };
    var scroll_lock_hideLockableOverflowTarget = function hideLockableOverflowTarget($target) {
      if (isElement($target) && $target.getAttribute('data-scroll-lock-locked') !== 'true') {
        var computedStyle = window.getComputedStyle($target);
        $target.setAttribute('data-scroll-lock-saved-overflow-y-property', computedStyle.overflowY);
        $target.setAttribute('data-scroll-lock-saved-inline-overflow-property', $target.style.overflow);
        $target.setAttribute('data-scroll-lock-saved-inline-overflow-y-property', $target.style.overflowY);
        $target.style.overflow = 'hidden';
        $target.setAttribute('data-scroll-lock-locked', 'true');
      }
    };
    var scroll_lock_showLockableOverflowTarget = function showLockableOverflowTarget($target) {
      if (isElement($target) && $target.getAttribute('data-scroll-lock-locked') === 'true') {
        $target.style.overflow = $target.getAttribute('data-scroll-lock-saved-inline-overflow-property');
        $target.style.overflowY = $target.getAttribute('data-scroll-lock-saved-inline-overflow-y-property');
        $target.removeAttribute('data-scroll-lock-saved-overflow-property');
        $target.removeAttribute('data-scroll-lock-saved-inline-overflow-property');
        $target.removeAttribute('data-scroll-lock-saved-inline-overflow-y-property');
        $target.removeAttribute('data-scroll-lock-locked');
      }
    };
    var fillGaps = function fillGaps() {
      state.fillGapSelectors.map(function (selector) {
        scroll_lock_fillGapSelector(selector);
      });
    };
    var unfillGaps = function unfillGaps() {
      state.fillGapSelectors.map(function (selector) {
        scroll_lock_unfillGapSelector(selector);
      });
    };
    var scroll_lock_fillGapSelector = function fillGapSelector(selector) {
      var $targets = document.querySelectorAll(selector);
      var isLockable = state.lockableSelectors.indexOf(selector) !== -1;
      eachNode($targets, function ($target) {
        scroll_lock_fillGapTarget($target, isLockable);
      });
    };
    var scroll_lock_fillGapTarget = function fillGapTarget($target) {
      var isLockable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      if (isElement($target)) {
        var scrollBarWidth;
        if ($target.getAttribute('data-scroll-lock-lockable') === '' || isLockable) {
          scrollBarWidth = scroll_lock_getTargetScrollBarWidth($target, true);
        } else {
          var $lockableParent = findParentBySelector($target, arrayAsSelector(state.lockableSelectors));
          scrollBarWidth = scroll_lock_getTargetScrollBarWidth($lockableParent, true);
        }
        if ($target.getAttribute('data-scroll-lock-filled-gap') === 'true') {
          scroll_lock_unfillGapTarget($target);
        }
        var computedStyle = window.getComputedStyle($target);
        $target.setAttribute('data-scroll-lock-filled-gap', 'true');
        $target.setAttribute('data-scroll-lock-current-fill-gap-method', state.fillGapMethod);
        if (state.fillGapMethod === 'margin') {
          var currentMargin = parseFloat(computedStyle.marginRight);
          $target.style.marginRight = "".concat(currentMargin + scrollBarWidth, "px");
        } else if (state.fillGapMethod === 'width') {
          $target.style.width = "calc(100% - ".concat(scrollBarWidth, "px)");
        } else if (state.fillGapMethod === 'max-width') {
          $target.style.maxWidth = "calc(100% - ".concat(scrollBarWidth, "px)");
        } else if (state.fillGapMethod === 'padding') {
          var currentPadding = parseFloat(computedStyle.paddingRight);
          $target.style.paddingRight = "".concat(currentPadding + scrollBarWidth, "px");
        }
      }
    };
    var scroll_lock_unfillGapSelector = function unfillGapSelector(selector) {
      var $targets = document.querySelectorAll(selector);
      eachNode($targets, function ($target) {
        scroll_lock_unfillGapTarget($target);
      });
    };
    var scroll_lock_unfillGapTarget = function unfillGapTarget($target) {
      if (isElement($target)) {
        if ($target.getAttribute('data-scroll-lock-filled-gap') === 'true') {
          var currentFillGapMethod = $target.getAttribute('data-scroll-lock-current-fill-gap-method');
          $target.removeAttribute('data-scroll-lock-filled-gap');
          $target.removeAttribute('data-scroll-lock-current-fill-gap-method');
          if (currentFillGapMethod === 'margin') {
            $target.style.marginRight = "";
          } else if (currentFillGapMethod === 'width') {
            $target.style.width = "";
          } else if (currentFillGapMethod === 'max-width') {
            $target.style.maxWidth = "";
          } else if (currentFillGapMethod === 'padding') {
            $target.style.paddingRight = "";
          }
        }
      }
    };
    var onResize = function onResize(e) {
      refillGaps();
    };
    var onTouchStart = function onTouchStart(e) {
      if (!state.scroll) {
        state.startTouchY = e.touches[0].clientY;
        state.startTouchX = e.touches[0].clientX;
      }
    };
    var scroll_lock_onTouchMove = function onTouchMove(e) {
      if (!state.scroll) {
        var startTouchY = state.startTouchY,
          startTouchX = state.startTouchX;
        var currentClientY = e.touches[0].clientY;
        var currentClientX = e.touches[0].clientX;
        if (e.touches.length < 2) {
          var selector = arrayAsSelector(state.scrollableSelectors);
          var direction = {
            up: startTouchY < currentClientY,
            down: startTouchY > currentClientY,
            left: startTouchX < currentClientX,
            right: startTouchX > currentClientX
          };
          var directionWithOffset = {
            up: startTouchY + TOUCH_DIRECTION_DETECT_OFFSET < currentClientY,
            down: startTouchY - TOUCH_DIRECTION_DETECT_OFFSET > currentClientY,
            left: startTouchX + TOUCH_DIRECTION_DETECT_OFFSET < currentClientX,
            right: startTouchX - TOUCH_DIRECTION_DETECT_OFFSET > currentClientX
          };
          var handle = function handle($el) {
            var skip = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
            if ($el) {
              var parentScrollableEl = findParentBySelector($el, selector, false);
              if (elementIsInputRange($el)) {
                return false;
              }
              if (skip || elementIsScrollableField($el) && findParentBySelector($el, selector) || elementHasSelector($el, selector)) {
                var prevent = false;
                if (elementScrollLeftOnStart($el) && elementScrollLeftOnEnd($el)) {
                  if (direction.up && elementScrollTopOnStart($el) || direction.down && elementScrollTopOnEnd($el)) {
                    prevent = true;
                  }
                } else if (elementScrollTopOnStart($el) && elementScrollTopOnEnd($el)) {
                  if (direction.left && elementScrollLeftOnStart($el) || direction.right && elementScrollLeftOnEnd($el)) {
                    prevent = true;
                  }
                } else if (directionWithOffset.up && elementScrollTopOnStart($el) || directionWithOffset.down && elementScrollTopOnEnd($el) || directionWithOffset.left && elementScrollLeftOnStart($el) || directionWithOffset.right && elementScrollLeftOnEnd($el)) {
                  prevent = true;
                }
                if (prevent) {
                  if (parentScrollableEl) {
                    handle(parentScrollableEl, true);
                  } else {
                    if (e.cancelable) {
                      e.preventDefault();
                    }
                  }
                }
              } else {
                handle(parentScrollableEl);
              }
            } else {
              if (e.cancelable) {
                e.preventDefault();
              }
            }
          };
          handle(e.target);
        }
      }
    };
    var onTouchEnd = function onTouchEnd(e) {
      if (!state.scroll) {
        state.startTouchY = 0;
        state.startTouchX = 0;
      }
    };
    if (typeof window !== 'undefined') {
      window.addEventListener('resize', onResize);
    }
    if (typeof document !== 'undefined') {
      document.addEventListener('touchstart', onTouchStart);
      document.addEventListener('touchmove', scroll_lock_onTouchMove, {
        passive: false
      });
      document.addEventListener('touchend', onTouchEnd);
    }
    var deprecatedMethods = {
      hide: function hide(target) {
        throwError('"hide" is deprecated! Use "disablePageScroll" instead. \n https://github.com/FL3NKEY/scroll-lock#disablepagescrollscrollabletarget');
        disablePageScroll(target);
      },
      show: function show(target) {
        throwError('"show" is deprecated! Use "enablePageScroll" instead. \n https://github.com/FL3NKEY/scroll-lock#enablepagescrollscrollabletarget');
        enablePageScroll(target);
      },
      toggle: function toggle(target) {
        throwError('"toggle" is deprecated! Do not use it.');
        if (getScrollState()) {
          disablePageScroll();
        } else {
          enablePageScroll(target);
        }
      },
      getState: function getState() {
        throwError('"getState" is deprecated! Use "getScrollState" instead. \n https://github.com/FL3NKEY/scroll-lock#getscrollstate');
        return getScrollState();
      },
      getWidth: function getWidth() {
        throwError('"getWidth" is deprecated! Use "getPageScrollBarWidth" instead. \n https://github.com/FL3NKEY/scroll-lock#getpagescrollbarwidth');
        return getPageScrollBarWidth();
      },
      getCurrentWidth: function getCurrentWidth() {
        throwError('"getCurrentWidth" is deprecated! Use "getCurrentPageScrollBarWidth" instead. \n https://github.com/FL3NKEY/scroll-lock#getcurrentpagescrollbarwidth');
        return getCurrentPageScrollBarWidth();
      },
      setScrollableTargets: function setScrollableTargets(target) {
        throwError('"setScrollableTargets" is deprecated! Use "addScrollableTarget" instead. \n https://github.com/FL3NKEY/scroll-lock#addscrollabletargetscrollabletarget');
        scroll_lock_addScrollableTarget(target);
      },
      setFillGapSelectors: function setFillGapSelectors(selector) {
        throwError('"setFillGapSelectors" is deprecated! Use "addFillGapSelector" instead. \n https://github.com/FL3NKEY/scroll-lock#addfillgapselectorfillgapselector');
        scroll_lock_addFillGapSelector(selector);
      },
      setFillGapTargets: function setFillGapTargets(target) {
        throwError('"setFillGapTargets" is deprecated! Use "addFillGapTarget" instead. \n https://github.com/FL3NKEY/scroll-lock#addfillgaptargetfillgaptarget');
        scroll_lock_addFillGapTarget(target);
      },
      clearQueue: function clearQueue() {
        throwError('"clearQueue" is deprecated! Use "clearQueueScrollLocks" instead. \n https://github.com/FL3NKEY/scroll-lock#clearqueuescrolllocks');
        clearQueueScrollLocks();
      }
    };
    var scrollLock = _objectSpread({
      disablePageScroll: disablePageScroll,
      enablePageScroll: enablePageScroll,
      getScrollState: getScrollState,
      clearQueueScrollLocks: clearQueueScrollLocks,
      getTargetScrollBarWidth: scroll_lock_getTargetScrollBarWidth,
      getCurrentTargetScrollBarWidth: scroll_lock_getCurrentTargetScrollBarWidth,
      getPageScrollBarWidth: getPageScrollBarWidth,
      getCurrentPageScrollBarWidth: getCurrentPageScrollBarWidth,
      addScrollableSelector: scroll_lock_addScrollableSelector,
      removeScrollableSelector: scroll_lock_removeScrollableSelector,
      addScrollableTarget: scroll_lock_addScrollableTarget,
      removeScrollableTarget: scroll_lock_removeScrollableTarget,
      addLockableSelector: scroll_lock_addLockableSelector,
      addLockableTarget: scroll_lock_addLockableTarget,
      addFillGapSelector: scroll_lock_addFillGapSelector,
      removeFillGapSelector: scroll_lock_removeFillGapSelector,
      addFillGapTarget: scroll_lock_addFillGapTarget,
      removeFillGapTarget: scroll_lock_removeFillGapTarget,
      setFillGapMethod: scroll_lock_setFillGapMethod,
      refillGaps: refillGaps,
      _state: state
    }, deprecatedMethods);

    /* harmony default export */
    var scroll_lock = __webpack_exports__["default"] = scrollLock;

    /***/
  }
  /******/)])["default"];
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../node_modules/webpack/buildin/module.js */ "../node_modules/webpack/buildin/module.js")(module)))

/***/ })

/******/ });
//# sourceMappingURL=main.min.js.map